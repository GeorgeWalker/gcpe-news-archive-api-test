// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.News.Archive.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Client.
    /// </summary>
    public static partial class ClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Archive> ApiArchivesGet(this IClient operations)
            {
                return operations.ApiArchivesGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Archive>> ApiArchivesGetAsync(this IClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiArchivesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newArchive'>
            /// </param>
            public static Archive ApiArchivesPost(this IClient operations, Archive newArchive = default(Archive))
            {
                return operations.ApiArchivesPostAsync(newArchive).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='newArchive'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Archive> ApiArchivesPostAsync(this IClient operations, Archive newArchive = default(Archive), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiArchivesPostWithHttpMessagesAsync(newArchive, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='pid'>
            /// </param>
            /// <param name='increment'>
            /// </param>
            /// <param name='creationTime'>
            /// </param>
            /// <param name='archiveId'>
            /// </param>
            public static Archive ApiArchivesByArchiveIdGet(this IClient operations, int timestamp, int machine, int pid, int increment, System.DateTimeOffset creationTime, string archiveId)
            {
                return operations.ApiArchivesByArchiveIdGetAsync(timestamp, machine, pid, increment, creationTime, archiveId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='pid'>
            /// </param>
            /// <param name='increment'>
            /// </param>
            /// <param name='creationTime'>
            /// </param>
            /// <param name='archiveId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Archive> ApiArchivesByArchiveIdGetAsync(this IClient operations, int timestamp, int machine, int pid, int increment, System.DateTimeOffset creationTime, string archiveId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiArchivesByArchiveIdGetWithHttpMessagesAsync(timestamp, machine, pid, increment, creationTime, archiveId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            public static string ApiAuthenticationTokenGet(this IClient operations, string secret = default(string))
            {
                return operations.ApiAuthenticationTokenGetAsync(secret).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiAuthenticationTokenGetAsync(this IClient operations, string secret = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthenticationTokenGetWithHttpMessagesAsync(secret, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Collection> ApiCollectionsGet(this IClient operations)
            {
                return operations.ApiCollectionsGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Collection>> ApiCollectionsGetAsync(this IClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCollectionsGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='pid'>
            /// </param>
            /// <param name='increment'>
            /// </param>
            /// <param name='creationTime'>
            /// </param>
            /// <param name='collectionId'>
            /// </param>
            public static IList<Archive> ApiCollectionsByCollectionIdArchivesGet(this IClient operations, int timestamp, int machine, int pid, int increment, System.DateTimeOffset creationTime, string collectionId)
            {
                return operations.ApiCollectionsByCollectionIdArchivesGetAsync(timestamp, machine, pid, increment, creationTime, collectionId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='pid'>
            /// </param>
            /// <param name='increment'>
            /// </param>
            /// <param name='creationTime'>
            /// </param>
            /// <param name='collectionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Archive>> ApiCollectionsByCollectionIdArchivesGetAsync(this IClient operations, int timestamp, int machine, int pid, int increment, System.DateTimeOffset creationTime, string collectionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiCollectionsByCollectionIdArchivesGetWithHttpMessagesAsync(timestamp, machine, pid, increment, creationTime, collectionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='pid'>
            /// </param>
            /// <param name='increment'>
            /// </param>
            /// <param name='creationTime'>
            /// </param>
            /// <param name='documentId'>
            /// </param>
            public static bool? ApiIndexByIndexNameAddByDocumentIdGet(this IClient operations, string indexName, int timestamp, int machine, int pid, int increment, System.DateTimeOffset creationTime, string documentId)
            {
                return operations.ApiIndexByIndexNameAddByDocumentIdGetAsync(indexName, timestamp, machine, pid, increment, creationTime, documentId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='indexName'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='machine'>
            /// </param>
            /// <param name='pid'>
            /// </param>
            /// <param name='increment'>
            /// </param>
            /// <param name='creationTime'>
            /// </param>
            /// <param name='documentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ApiIndexByIndexNameAddByDocumentIdGetAsync(this IClient operations, string indexName, int timestamp, int machine, int pid, int increment, System.DateTimeOffset creationTime, string documentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIndexByIndexNameAddByDocumentIdGetWithHttpMessagesAsync(indexName, timestamp, machine, pid, increment, creationTime, documentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
